using System;

namespace LawOfDemeterPrinciple
{
    class Program
    {
        static void Main(string[] args)
        {
            //也叫最少知识原则。迪米特法则的定义是只与你的直接朋友交谈，不与"陌生人"说话。如果两个软件实体无须直接通信，
            //那么就不应当发生直接的相互调用，可以通过第三方转发该应用。其目的是降低类之间的耦合度，提高模块的相对独立性。
            //迪米特法则中的朋友是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象存在关联、聚合或组合关系，
            //可以直接访问这些对象的方法。
            //优点：
            //1、降低类之间的耦合度，提高模块的相对独立性。
            //2、由于亲和度降低，从而提高了类的可复用率和系统的扩展性。
            //缺点：
            //过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。
            //所以，在釆用迪米特法则时需要反复权衡，
            //确保高内聚和低耦合的同时，保证系统的结构清晰。
            //使用迪米特法则需要注意：
            //　　1、在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。
            //　　2、在类的结构设计上，尽量降低类成员的访问权限。
            //　　3、在类的设计上，优先考虑将一个类设置成不变类。
            //　　4、在对其他类的引用上，将引用其他对象的次数降到最低。
            //　　5、不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。
            //    6、谨慎使用序列化（Serializable）功能。

            //超市、工厂、顾客三者之间，超市作为中立将商品从工厂输送到顾客手中，但是顾客和工厂完全是不打交道的
            SuperMarket superMarket = new SuperMarket();
            Customer customer = new Customer();
            ProductFactory factory = new ProductFactory();

            superMarket.GetProductFromFactory(factory);
            customer.BuyProduct(superMarket);
            
        }
    }
}
