using System;

namespace DependenceInversionPrinciple
{
    class Program
    {
        static void Main(string[] args)
        {
            //1、高层模块不应该依赖底层模块，二者都应该依赖抽象。
　　        //2、抽象不应该依赖细节，细节应该依赖抽象。
　　        //3、依赖倒置的中心思想是面向接口编程。
　　        //4、依赖倒置原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础搭建的架构要稳定的多。
　　        //5、使用接口或抽象类的目的是指定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类来完成。

            //实际上也就是常说的依赖注入，我们注入的时候是一个抽象的事物(接口),只关心抽象，具体的实现到实现类中解决
            //依赖注入通常包括构造函数注入、Setter注入等
        }
    }
}
